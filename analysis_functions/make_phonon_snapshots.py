import numpy as np
import scipy.interpolate


def make_interpolated_array(original_array, L, max_L):
    
    
    """
    Given an array of phonon variables of length L (i.e. L imaginary times), returns new array of length max_L
    with interpolated values, where max_L is the number of time slices in lowest temperature (highest beta) 
    simulation performed.
    
    
    Parameters
    ----------
    
    original_array : ndarray
        Array of original phonon position variables.
    L : int
        Original number of imaginary time slices.
    max_L : int
        Maximum number of imaginary time slices. Will be the length of the interpolated array.
        
    
    Returns
    -------
    
    new_array : ndarray
        Array of interpolated phonon position variables.
    
    
    """
        
        
    x = list(range(L))
    y = array
    
    new_x = np.linspace(0, L-1, max_L)  
    new_array = scipy.interpolate.interp1d(x, y, kind='linear')(new_x)  
    
    return new_array


def file_to_interpolated_snapshot(file, dtau, Ns, max_L):
    
    
    """
    Given an output file of phonon position data, returns 2d array of interpolated values of dimension (Ns, max_L)
    where Ns is the total number of lattice sites, and max_L is the number of time slices in lowest temperature (highest beta) 
    simulation performed.
    
    
    Parameters
    ----------
    
    file :
        The .out file of phonon position data generated by HMC simulation.
    dtau : float
        Imaginary time discretization in HMC simulation.
    Ns : int 
        Total number of (spatial) lattice sites.
    max_L : int 
        Number of time slices in lowest temperature (highest beta) simulation performed.
    
    
    
    Returns
    -------
    
    new_snapshot : ndarray
        Array of dimension (Ns, max_L) of interpolated phonon variables, where each row contains x(tau) data for a particular spatial site.
    
    
    """
    
    
    snapshot = np.loadtxt(file, skiprows=1)
        
    beta = file.split('_')[2][1:]
    L = int(float(beta)/dtau)   

    reshaped_snapshot = snapshot.reshape(Ns, L)             
    
    new_snapshot = np.zeros(shape=(Ns, max_L))    
                                                  
    for i in range(Ns):
    
        new_snapshot[i, :] = make_interpolated_array(reshaped_snapshot[i, :], L, max_L)    
    
    return new_snapshot


def file_to_interpolated_snapshot_flat(file, dtau, Ns, max_L):
    
    
    """
    Given an output file of phonon position data, returns flattened 1d array of interpolated values, with (Ns * max_L) elements,
    where Ns is the total number of lattice sites, and max_L is the number of time slices in lowest temperature (highest beta) 
    simulation performed.
    
    
    Parameters
    ----------
    
    file :
        The .out file of phonon position data generated by HMC simulation.
    dtau : float
        Imaginary time discretization in HMC simulation.
    Ns : int 
        Total number of (spatial) lattice sites.
    max_L : int 
        Number of time slices in lowest temperature (highest beta) simulation performed.
    
    
    
    Returns
    -------
    
    new_snapshot : ndarray
        1d array of dimension (Ns * max_L) of interpolated phonon variables.
    
    
    """
    
    
    snapshot = np.loadtxt(file, skiprows=1)
    
    beta = file.split('_')[2][1:]
    L = int(float(beta)/dtau)   

    reshaped_snapshot = snapshot.reshape(Ns, L)             
    
    new_snapshot = np.zeros(shape=(Ns, max_L))  

    for i in range(Ns):
    
        new_snapshot[i, :] = make_interpolated_array(reshaped_snapshot[i, :], L, max_L)    
            
    return new_snapshot.flatten()   



def file_to_mean_snapshot(file, dtau, Ns):
    
    
    """
    Given an output file of phonon position data, returns 1d array of imaginary time-averaged phonon position variables, with Ns elements,
    where Ns is the total number of lattice sites.
    
    
    Parameters
    ----------
    
    file :
        The .out file of phonon position data generated by HMC simulation.
    dtau : float
        Imaginary time discretization in HMC simulation.
    Ns : int 
        Total number of (spatial) lattice sites.

    
    Returns
    -------
    
    mean_snapshot : ndarray
        1d array of dimension (Ns) of imaginary time-averaged phonon position variables.
    
    """
    
    
    snapshot = np.loadtxt(file, skiprows=1)
        
    beta = file.split('_')[2][1:]
    L = int(float(beta)/dtau)   
    
    reshaped_snapshot = snapshot.reshape(Ns, L)            
    
    mean_snapshot = np.mean(reshaped_snapshot, axis=1)      
                                                           

    return mean_snapshot    


def beta_to_nsnap_interpolated_phonon_snapshots(folder, dtau, n_snap, n_meas, Ns, max_L, save_data=True):
    
    """
    Given a directory of simulation results (at some particular fixed temperature), returns an array of phonon position data of 
    dimension (n_snap, (Ns * max_L)+1). Each row corresponds to a particular snapshot measurement taken during the simulation.
    Each row contains interpolated phonon positions as a function of imaginary time, for each spatial site. The inverse temperature
    beta (a single float) is appended to each row.
    
    
    Parameters
    ----------
    
    folder :
        The full directory of output data generated by HMC simulation.
    dtau : float
        Imaginary time discretization in HMC simulation.
    n_snap : int 
        The number of snapshots to save.
    n_meas: int
        Total number of measurement sweeps performed during HMC simulation.
    Ns : int
        Total number of (spatial) lattice sites.
    max_L : int
        Number of time slices in lowest temperature (highest beta) simulation performed.
    save_data : bool
        If True, saves full_data in .npy and .csv format.

    
    Returns
    -------
    
    full_data : ndarray
               array of phonon position data of dimension (n_snap, (Ns * max_L)+1). Each row corresponds to a particular snapshot
               measurement taken during the simulation. Each row contains interpolated phonon positions as a function of imaginary
               time, for each spatial site. The inverse temperature beta (a single float) is appended to each row.
    
    """
    
    
    ns = n_meas // n_snap 
    
    full_data = np.zeros(shape=(n_snap, (Ns * max_L) + 1))
    beta = float(folder.split('_')[2][1:])
    
    sample = 0

    for i in range(ns, 10000 + ns, ns):

        tag = '0'*(6 - len(str(i))) + str(i)  #  File number

        file = folder + '/phonon_position_snapshots_f/phonon_position_snapshot_' + tag + '.out'

        new_snapshot = file_to_interpolated_snapshot_flat(file, dtau, Ns, max_L)
        
        new_snapshot = np.append(new_snapshot, beta)

        full_data[sample, :] = new_snapshot

        sample += 1
        
    if save_data:    
        
        np.save('interpolated_phonon_positions_beta'+folder.split('_')[2][1:]+'_ns'+str(ns), full_data)
    
        np.savetxt('interpolated_phonon_positions_beta'+folder.split('_')[2][1:]+'_ns'+str(ns)+'.csv', np.transpose(full_data), delimiter=',')
    
    return full_data
    
    
def beta_to_nsnap_mean_snapshots(folder, dtau, n_snap, n_meas, Ns, save_data=True):
    
    """
    Given a directory of simulation results (at some particular fixed temperature), returns an array of phonon position data of 
    dimension (n_snap, Ns + 1). Each row corresponds to a particular snapshot measurement taken during the simulation.
    Each row contains interpolated mean (over imaginary time) phonon positions, for each spatial site. The inverse temperature
    beta (a single float) is appended to each row.
    
    
    Parameters
    ----------
    
    folder :
        The full directory of output data generated by HMC simulation.
    dtau : float
        Imaginary time discretization in HMC simulation.
    n_snap : int 
        The number of snapshots to save.
    n_meas: int
        Total number of measurement sweeps performed during HMC simulation.
    Ns : int
        Total number of (spatial) lattice sites.
    save_data : bool
        If True, saves full_data in .npy and .csv format.

    
    Returns
    -------
    
    full_data : ndarray
               array of phonon position data of dimension (n_snap, (Ns * max_L)+1). Each row corresponds to a particular snapshot
               measurement taken during the simulation. Each row contains interpolated phonon positions as a function of imaginary
               time, for each spatial site. The inverse temperature beta (a single float) is appended to each row.
    
    """
    

    ns = n_meas // n_snap   

    full_data = np.zeros(shape=(n_snap, (Ns + 1)))
    beta = float(folder.split('_')[2][1:])
    
    sample = 0
    
    for i in range(ns, 10000 + ns, ns):
        
        tag = '0'*(6 - len(str(i))) + str(i)  #  File number

        file = folder + '/phonon_position_snapshots_f/phonon_position_snapshot_' + tag + '.out'
        
        new_snapshot = file_to_mean_snapshot(file, dtau, Ns)
        
        new_snapshot = np.append(new_snapshot, beta)
        
        full_data[sample, :] = new_snapshot

        sample += 1
            
    if save_data:   
        
        np.save('mean_phonon_positions_beta'+folder.split('_')[2][1:]+'_ns'+str(ns), full_data)
    
        np.savetxt('mean_phonon_positions_beta'+folder.split('_')[2][1:]+'_ns'+str(ns)+'.csv', full_data, delimiter=',')

    return full_data
    